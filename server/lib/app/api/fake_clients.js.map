{"version":3,"sources":["app/api/fake_clients.js"],"names":[],"mappings":";;;;;;;;;;;;qBAAkB,OAAO;;;;uBACL,SAAS;;;;sBACf,QAAQ;;;;qBACJ,OAAO;;;;AACzB,mBAAM,MAAM,GAAG,IAAI,CAAC;;AAEpB,IAAM,UAAU,GAAG;AACf,IAAE,EAAE,aAAa;AACjB,MAAI,EAAE,qBAAqB;AAC3B,QAAM,EAAE,CAAC;AACL,SAAK,EAAE,aAAa;AACpB,SAAK,EAAE,mBAAmB;GAC7B,CAAC;AACF,SAAO,EAAE;AACL,UAAM,EAAE,eAAe;AACvB,UAAM,EAAE,oBAAoB;AAC5B,WAAO,EAAE,iBAAiB;GAC7B;AACD,QAAM,EAAE,CAAC,gBAAgB,CAAC;AAC1B,SAAO,EAAE,cAAc;AACvB,OAAK,EAAE,gBAAgB;AACvB,OAAK,EAAE,iBAAiB;AACxB,WAAS,EAAE,kBAAkB;AAC7B,WAAS,EAAE,aAAa;AACxB,MAAI,EAAE,kBAAkB;CAC3B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCF,SAAS,YAAY,CAAC,GAAG,EAAE,GAAG,EAAC;AAC7B,SAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC,CAAA,AAAC,CAAC,GAAG,GAAG,CAAC;CAC1D;;AAGD,SAAS,cAAc,CAAC,MAAM,EAAC;AAC7B,WAAS,MAAM,CAAC,QAAQ,EAAC;0BACR,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC;;;;QAA7B,EAAE;QAAE,EAAE;;AACX,WAAO,mBAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;GACxB;;AAED,MAAI,GAAG,GAAG,EAAE,CAAC;;;;;;;;;;UAEJ,GAAG;UAAE,QAAQ;;AACpB,UAAG,oBAAE,QAAQ,CAAC,QAAQ,CAAC,EAAC;AACtB,WAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;OAC7B,MAAK,IAAG,oBAAE,OAAO,CAAC,QAAQ,CAAC,EAAC;AAC3B,YAAG,oBAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAC;AACzB,aAAG,CAAC,GAAG,CAAC,GAAG,oBAAE,KAAK,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;mBAAM,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;WAAA,CAAC,CAAC;SACnE,MAAI;AACH,aAAG,CAAC,GAAG,CAAC,GAAG,oBAAE,KAAK,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;mBAAM,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;WAAA,CAAC,CAAC;SAC3E;OACF,MAAK,IAAG,oBAAE,QAAQ,CAAC,QAAQ,CAAC,EAAC;AAC5B,WAAG,CAAC,GAAG,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;OACrC;;;AAXH,yBAA2B,oBAAE,KAAK,CAAC,MAAM,CAAC,8HAAC;;KAY1C;;;;;;;;;;;;;;;;AACD,SAAO,GAAG,CAAC;CACZ;;AAEM,SAAS,IAAI,CAAC,GAAG,EAAC;AACvB,KAAG,CAAC,GAAG,CAAC,UAAU,EAAE,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAC;;AAE1C,OAAG,CAAC,IAAI,CAAC,oBAAE,KAAK,CAAC,YAAY,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;GAChF,CAAC,CAAC;CACJ","file":"app/api/fake_clients.js","sourcesContent":["import async from 'async';\nimport request from 'request';\nimport _ from 'lodash';\nimport faker from 'faker';\nfaker.locale = 'en';\n\nconst fakeSchema = {\n    id: 'random.uuid'\n  , name: 'company.companyName'\n  , phones: [{\n        label: 'hacker.noun'\n      , phone: 'phone.phoneNumber'\n    }]\n  , address: {\n        number: 'random.number'\n      , street: 'address.streetName'\n      , country: 'address.country'\n    }\n  , emails: ['internet.email']\n  , website: 'internet.url'\n  , color: 'internet.color'\n  , image: 'internet.avatar'\n  , legalForm: 'hacker.adjective' \n  , createdAt: 'date.recent' \n  , note: 'lorem.paragraphs' \n};\n\n// const locale = \"fr\";\n// const fakerUrl = \"http://faker.hook.io?property=\";\n//\n//\n// function requestFakeObject(schema, cb){\n//   function requestFakeProperty(property, cb){\n//     if(typeof schema[property] === 'string'){\n//       let options = {\n//         url: fakerUrl + schema[property],\n//         headers: { 'Content-Type': 'application/json'}\n//       };\n//       request(options, (err, res, body) => {\n//         if(err || res.statusCode != 200) return cb(null, {[property]: 'unknown'});\n//         console.log(body)\n//         cb(null, {[property]: JSON.parse(body)});\n//       });\n//     }else{\n//       cb(null, {[property]: 'unknown'});\n//     }\n//   }\n//\n//   async.map(\n//     Object.keys(schema), \n//     requestFakeProperty,\n//     (err, data) => {\n//       if(err)return next(err);\n//       cb(null, _.assign(...data));\n//     }\n//   )\n// }\n\nfunction getRandomInt(min, max){\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n\nfunction makeFakeObject(schema){\n  function fakeMe(property){\n    let [p1, p2] = property.split('.');\n    return faker[p1][p2]();\n  }\n\n  let res = {};\n  //for(let [key, property] of Object.entries(schema)){\n  for(let [key, property] of _.pairs(schema)){\n    if(_.isString(property)){\n      res[key] = fakeMe(property);\n    }else if(_.isArray(property)){\n      if(_.isString(property[0])){\n        res[key] = _.times(getRandomInt(1, 3), () => fakeMe(property[0]));\n      }else{\n        res[key] = _.times(getRandomInt(1, 3), () => makeFakeObject(property[0]));\n      }\n    }else if(_.isObject(property)){\n      res[key] = makeFakeObject(property);\n    }\n  }\n  return res;\n}\n\nexport function init(app){\n  app.get('/clients', function(req, res, next){\n    //let obj = makeFakeObject(fakeSchema);\n    res.json(_.times(getRandomInt(10, 30), makeFakeObject.bind(null, fakeSchema)));\n  });\n}\n"],"sourceRoot":"/home/redpelicans/timetrack/server/src"}