{"version":3,"sources":["app/index.js"],"names":[],"mappings":";;;;;;;;;gCAAmB,sBAAsB;;;;qBACvB,OAAO;;;;oBACR,MAAM;;;;oBACN,MAAM;;;;qBACL,OAAO;;;;sBACO,QAAQ;;;;0BACJ,aAAa;;;;4BACX,eAAe;;;;uBACjC,SAAS;;;;AAE7B,IAAI,QAAQ,GAAG,wBAAM,iBAAiB,CAAC;IACnC,OAAO,GAAG,wBAAM,gBAAgB,CAAC,CAAC;;AAE/B,SAAS,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE;AAC3C,MAAI,GAAG,GAAG,2BAAS;MACf,UAAU,GAAG,kBAAK,YAAY,CAAC,GAAG,CAAC,CAAC;;AAGxC,WAAS,IAAI,CAAC,EAAE,EAAC;AACf,cAAU,CAAC,KAAK,CAAC,YAAI;AAAC,gBAAU,CAAC,KAAK,EAAE,CAAC,AAAC,EAAE,EAAE,CAAA;KAAC,CAAC,CAAC;GAClD;;AAED,qBAAM,QAAQ,CAAC;;AAEb,QAAI,EAAE,cAAS,EAAE,EAAC;AAChB,UAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;AAC9B,gBAAU,CAAC,MAAM,CAAC,IAAI,EAAE,YAAW;AACjC,eAAO,qCAAmC,IAAI,CAAG,CAAC;AAClD,UAAE,EAAE,CAAC;OACN,CAAC,CAAC;KACJ;GACF,EAAE,UAAS,GAAG,EAAC;AACd,QAAG,GAAG,EAAC,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;;;;;AAKtB,OAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;;AAE5B,OAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;;;;AAI1B,OAAG,CAAC,GAAG,CAAC,wBAAW,UAAU,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAClE,OAAG,CAAC,GAAG,CAAC,wBAAW,IAAI,CAAC,EAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;;;AAG1D,OAAG,CAAC,GAAG,CAAC,gCAAc,CAAC,CAAC;;;;AAIxB,WAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AACvC,WAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;;;AAG1C,OAAG,CAAC,GAAG,CAAC,yBAAO,KAAK,CAAC,CAAC,CAAC;;AAGvB,OAAG,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC;;AAEvD,OAAG,CAAC,GAAG,+BAAQ,CAAC;;AAEhB,MAAE,CAAC,IAAI,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,CAAC,CAAC;GACxB,CAAC,CAAC;CACJ","file":"app/index.js","sourcesContent":["import errors from '../middleware/errors';\nimport debug from 'debug';\nimport path from 'path';\nimport http from 'http';\nimport async from 'async';\nimport {default as logger} from 'morgan';\nimport {default as bodyParser} from 'body-parser';\nimport {default as cookieParser} from 'cookie-parser';\nimport express from 'express';\n\nlet logerror = debug('timetrack:error')\n  , loginfo = debug('timetrack:info');\n\nexport function start(params, resources, cb) {\n  let app = express()\n    , httpServer = http.createServer(app);\n\n\n  function stop(cb){\n    httpServer.close(()=>{httpServer.unref(); cb()});\n  }\n\n  async.parallel({\n    // init http depending on param.js\n    http: function(cb){\n      let port = params.server.port;\n      httpServer.listen(port, function() {\n        loginfo(`HTTP server listening on port: ${port}`);\n        cb();\n      });\n    }\n  }, function(err){\n    if(err)return cb(err);\n\n    // register middleware, order matters\n\n    // remove for security reason\n    app.disable('x-powered-by');\n    // usually node is behind a proxy, will keep original IP\n    app.enable('trust proxy');\n\n    // register bodyParser to automatically parse json in req.body and parse url\n    // params\n    app.use(bodyParser.urlencoded({ limit: '10mb', extended: true }));\n    app.use(bodyParser.json({limit: '10mb', extended: true}));\n\n    // manage cookie\n    app.use(cookieParser());\n\n    //app.use(express.static(path.join(__dirname, '../../../public')));\n\n    require('./ping').init(app, resources);\n    require('./version').init(app, resources);\n\n    // register morgan logger\n    app.use(logger('dev'));\n\n\n    app.use('/api', require('./api').init(app, resources));\n    \n    app.use(errors);\n\n    cb(null, {stop: stop});\n  });\n}\n\n"],"sourceRoot":"/home/redpelicans/timetrack/server/src"}